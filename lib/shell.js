// Generated by CoffeeScript 1.4.0
var colors, fs, shell, spawn;

spawn = require('child_process').spawn;

colors = require('colors');

fs = require('fs');

module.exports = shell = {
  gotDirectory: function(directory) {
    try {
      return fs.lstatSync(directory).isDirectory();
    } catch (error) {
      return false;
    }
  },
  makeDirectory: function(directory) {
    throw Error('makeDirectory()');
  },
  execSync: function(command, log) {
    if (log == null) {
      log = false;
    }
    throw Error('execSync()');
    if (log) {
      return console.log('(run)'.bold, command);
    }
  },
  spawn: function(command, opts, callback) {
    var child;
    console.log('(run)'.bold, command, opts.join(' '));
    child = spawn(command, opts);
    child.stdout.pipe(process.stdout);
    child.stderr.pipe(process.stderr);
    return child.on('close', function(code, signal) {
      if (code > 0) {
        return callback(new Error(("'" + command + " " + (opts.join(' ')) + "'") + ' exited with errorcode: ' + code));
      } else {
        return callback(null);
      }
    });
  },
  spawnAt: function(at, command, opts, callback) {
    var child, originalDir;
    if (!at.directory) {
      callback(new Error("spawnAt() requires directory: 'dir'"));
      return;
    }
    originalDir = process.cwd();
    try {
      process.chdir(at.directory);
      console.log('(run)'.bold, command, opts.join(' '), "(in " + at.directory + ")");
      child = spawn(command, opts);
      child.stdout.pipe(process.stdout);
      child.stderr.pipe(process.stderr);
      return child.on('close', function(code, signal) {
        if (code > 0) {
          process.chdir(originalDir);
          return callback(new Error(("'" + command + " " + (opts.join(' ')) + "'") + ' exited with errorcode: ' + code));
        } else {
          process.chdir(originalDir);
          return callback(null);
        }
      });
    } catch (error) {
      process.chdir(originalDir);
      return callback(error, null);
    }
  }
};
