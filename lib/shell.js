// Generated by CoffeeScript 1.4.0
var colors, defer, fs, shell, spawn;

spawn = require('child_process').spawn;

colors = require('colors');

fs = require('fs-extra');

defer = require('when').defer;

module.exports = shell = {
  gotDirectory: function(directory) {
    try {
      return fs.lstatSync(directory).isDirectory();
    } catch (error) {
      return false;
    }
  },
  promiseDirectory: function(directory) {
    var d;
    d = defer();
    fs.mkdirp(directory, function(err) {
      if (err) {
        return d.reject(err);
      }
      return d.resolve(directory);
    });
    return d.promise;
  },
  spawn: function(command, opts, masterDefer, callback) {
    var child, stderr, stdout;
    if (masterDefer && typeof masterDefer.notify === 'function') {
      masterDefer.notify({
        cli: {
          context: 'normal',
          event: 'shell',
          detail: "" + command + " " + (opts.join(' '))
        }
      });
    }
    child = spawn(command, opts);
    stdout = '';
    stderr = '';
    child.stdout.on('data', function(data) {
      return stdout += data.toString();
    });
    child.stderr.on('data', function(data) {
      return stderr += data.toString();
    });
    return child.on('close', function(code, signal) {
      if (code > 0) {
        return callback(new Error(("'" + command + " " + (opts.join(' ')) + "'") + ' exited with errorcode: ' + code));
      } else {
        return callback(null, {
          code: code,
          stdout: stdout,
          stderr: stderr
        });
      }
    });
  },
  spawnAt: function(at, command, opts, masterDefer, callback) {
    var child, originalDir, stderr, stdout;
    if (!at.directory) {
      callback(new Error("spawnAt() requires directory: 'dir'"));
      return;
    }
    originalDir = process.cwd();
    try {
      process.chdir(at.directory);
      console.log('(run)'.bold, command, opts.join(' '), "(in " + at.directory + ")");
      child = spawn(command, opts);
      stdout = '';
      stderr = '';
      child.stdout.on('data', function(data) {
        return stdout += data.toString();
      });
      child.stderr.on('data', function(data) {
        return stderr += data.toString();
      });
      return child.on('close', function(code, signal) {
        if (code > 0) {
          process.chdir(originalDir);
          return callback(new Error(("'" + command + " " + (opts.join(' ')) + "'") + ' exited with errorcode: ' + code));
        } else {
          process.chdir(originalDir);
          return callback(null, {
            code: code,
            stdout: stdout,
            stderr: stderr
          });
        }
      });
    } catch (error) {
      process.chdir(originalDir);
      return callback(error, null);
    }
  }
};
