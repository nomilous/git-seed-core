// Generated by CoffeeScript 1.4.0
var Shell, colors, fs, git, sequence;

Shell = require('./shell');

colors = require('colors');

fs = require('fs');

sequence = require('when/sequence');

module.exports = git = {
  getOrigin: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    try {
      return Shell.spawn('git', ["--git-dir=" + gitDir, 'config', '--get', 'remote.origin.url'], null, function(error, result) {
        if (error) {
          return callback(error);
        }
        return callback(null, result.stdout.trim());
      });
    } catch (error) {
      return callback(error);
    }
  },
  getHeadRef: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return fs.readFile("" + gitDir + "/HEAD", function(error, data) {
      if (error) {
        return callback(error);
      }
      return callback(null, data.toString().match(/ref: (.*)\n$/)[1]);
    });
  },
  getHeadVersion: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return git.getHeadRef(workDir, function(error, head) {
      if (error) {
        return callback(error);
      }
      return fs.readFile("" + gitDir + "/" + head, function(error, data) {
        if (error) {
          return callback(error);
        }
        return callback(error, data.toString().trim());
      });
    });
  },
  getStatus: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return Shell.spawn('git', ["--git-dir=" + gitDir, "--work-tree=" + workDir, 'status'], null, callback);
  },
  gitDir: function(workDir) {
    return workDir + '/.git';
  },
  showStagedDiffs: function(workDir) {
    return Shell.execSync("git --git-dir=" + workDir + "/.git --work-tree=" + workDir + " diff --cached", false);
  },
  hasStagedChanges: function(workDir) {
    return 0 !== git.showStagedDiffs(workDir).length;
  },
  clone: function(workDir, origin, branch, masterDefer, finalCallback) {
    return sequence([Shell.promiseDirectory, function() {}], workdir).then(function() {
      return console.log('RESULT:', arguments);
    }, function() {
      return console.log('ERROR:', arguments);
    });
  },
  commit: function(workDir, branch, message, finalCallback) {},
  pull: function(workDir, origin, branch, ref, finalCallback) {}
};
