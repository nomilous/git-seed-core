// Generated by CoffeeScript 1.4.0
var Shell, colors, fs, git, waterfall;

Shell = require('./shell');

colors = require('colors');

waterfall = require('async').waterfall;

fs = require('fs');

module.exports = git = {
  getOrigin: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    try {
      return Shell.spawn('git', ["--git-dir=" + gitDir, 'config', '--get', 'remote.origin.url'], null, function(error, result) {
        if (error) {
          return callback(error);
        }
        return callback(null, result.stdout.trim());
      });
    } catch (error) {
      return callback(error);
    }
  },
  getHeadRef: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return fs.readFile("" + gitDir + "/HEAD", function(error, data) {
      if (error) {
        return callback(error);
      }
      return callback(null, data.toString().match(/ref: (.*)\n$/)[1]);
    });
  },
  getHeadVersion: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return git.getHeadRef(workDir, function(error, head) {
      if (error) {
        return callback(error);
      }
      return fs.readFile("" + gitDir + "/" + head, function(error, data) {
        if (error) {
          return callback(error);
        }
        return callback(error, data.toString().trim());
      });
    });
  },
  getStatus: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return Shell.spawn('git', ["--git-dir=" + gitDir, "--work-tree=" + workDir, 'status'], null, callback);
  },
  gitDir: function(workDir) {
    return workDir + '/.git';
  },
  showStagedDiffs: function(workDir) {
    return Shell.execSync("git --git-dir=" + workDir + "/.git --work-tree=" + workDir + " diff --cached", false);
  },
  hasStagedChanges: function(workDir) {
    return 0 !== git.showStagedDiffs(workDir).length;
  },
  clone: function(workDir, origin, branch, finalCallback) {
    return waterfall([
      function(callback) {
        if (Shell.gotDirectory(workDir)) {
          return callback(null);
        } else {
          return Shell.spawn('mkdir', ['-p', workDir], callback);
        }
      }, function(callback) {
        if (Shell.gotDirectory("" + workDir + "/.git")) {
          console.log('(skip)'.green, 'already cloned', workDir);
          return callback(null);
        } else {
          return Shell.spawn('git', ['clone', origin, workDir], callback);
        }
      }, function(callback) {
        if (git.showBranch(workDir) === branch) {
          return callback(null);
        } else {
          return Shell.spawn('git', ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'checkout', branch.replace('refs/heads/', '')], callback);
        }
      }
    ], finalCallback);
  },
  commit: function(workDir, branch, message, finalCallback) {
    return waterfall([
      function(callback) {
        var skip;
        skip = false;
        if (Shell.gotDirectory(workDir)) {
          return callback(null, skip);
        } else {
          console.log('( SKIPPED )'.red, 'missing repo', workDir.bold);
          return callback(null, skip = true);
        }
      }, function(skip, callback) {
        var currentBranch;
        if (skip) {
          callback(null, skip);
          return;
        }
        currentBranch = git.showBranch(workDir);
        if (currentBranch === branch) {
          return callback(null, skip);
        } else {
          console.log('( SKIPPED )'.red, workDir.bold, 'SHOULD BE ON BRANCH', branch.red, 'NOT', currentBranch.red);
          return callback(null, skip = true);
        }
      }, function(skip, callback) {
        if (skip) {
          callback(null, skip);
          return;
        }
        if (!git.hasStagedChanges(workDir)) {
          console.log('(skip)'.green, 'no staged changes in', workDir);
          callback(null);
          return;
        }
        return Shell.spawn('git', ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'commit', '-m', message], callback);
      }
    ], finalCallback);
  },
  pull: function(workDir, origin, branch, ref, finalCallback) {
    return waterfall([
      function(callback) {
        var skip;
        skip = false;
        if (Shell.gotDirectory(workDir)) {
          return callback(null, skip);
        } else {
          console.log('( SKIPPED )'.red, 'missing repo', workDir.bold);
          return callback(null, skip = true);
        }
      }, function(skip, callback) {
        var currentBranch;
        if (skip) {
          callback(null, skip);
          return;
        }
        currentBranch = git.showBranch(workDir);
        if (currentBranch === branch) {
          return callback(null, skip);
        } else {
          console.log('( SKIPPED )'.red, workDir.bold, 'SHOULD BE ON BRANCH', branch.red, 'NOT', currentBranch.red);
          if (workDir === '.') {
            return callback(new Error('Root repo on wrong branch!'), null);
          } else {
            return callback(null, skip = true);
          }
        }
      }, function(skip, callback) {
        if (skip) {
          callback(null, skip);
          return;
        }
        if (git.showRef(workDir) === ref) {
          console.log('(skip)'.green, workDir, 'already up-to-date'.green, 'with .git-seed');
          callback(null);
          return;
        }
        return Shell.spawnAt({
          directory: workDir
        }, 'git', ["pull", origin, branch], callback);
      }
    ], finalCallback);
  }
};
