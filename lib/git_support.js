// Generated by CoffeeScript 1.4.0
var Shell, defer, fs, git, mkdirp, nodefn, sequence;

Shell = require('./shell');

fs = require('fs');

sequence = require('when/sequence');

nodefn = require('when/node/function');

defer = require('when').defer;

mkdirp = require('fs-extra').mkdirp;

module.exports = git = {
  getOrigin: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    try {
      return Shell.spawn('git', ["--git-dir=" + gitDir, 'config', '--get', 'remote.origin.url'], null, function(error, result) {
        if (error) {
          return callback(error);
        }
        return callback(null, result.stdout.trim());
      });
    } catch (error) {
      return callback(error);
    }
  },
  getHeadRef: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return fs.readFile("" + gitDir + "/HEAD", function(error, data) {
      if (error) {
        return callback(error);
      }
      return callback(null, data.toString().match(/ref: (.*)\n$/)[1]);
    });
  },
  getHeadVersion: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    return git.getHeadRef(workDir, function(error, head) {
      if (error) {
        return callback(error);
      }
      return fs.readFile("" + gitDir + "/" + head, function(error, data) {
        if (error) {
          return callback(error);
        }
        return callback(error, data.toString().trim());
      });
    });
  },
  gitDir: function(workDir) {
    return workDir + '/.git';
  },
  checkoutArgs: function(workDir, branch) {
    return ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'checkout', branch.replace('refs/heads/', '')];
  },
  needClone: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    if (Shell.gotDirectory(gitDir)) {
      callback('already cloned');
      return;
    }
    return callback(null);
  },
  missingRepo: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    if (!Shell.gotDirectory(gitDir)) {
      callback('missing repo');
      return;
    }
    return callback(null);
  },
  status: function(workDir, origin, branch, superTask, callback) {
    sequence([
      function() {
        return nodefn.call(git.missingRepo, workDir);
      }
    ]).then(function(result) {
      return callback(null, result);
    }, function(error) {
      if (error === 'missing repo') {
        superTask.notify.info.bad('missing repo', workDir);
        callback(null, {});
        return;
      }
      return callback(error);
    });
    return callback(null, {});
  },
  clone: function(workDir, origin, branch, superTask, callback) {
    var cloneArgs;
    cloneArgs = ['clone', origin, workDir];
    return sequence([
      function() {
        return nodefn.call(mkdirp, workDir);
      }, function() {
        return nodefn.call(git.needClone, workDir);
      }, function() {
        return nodefn.call(Shell.spawn, 'git', ['clone', origin, workDir], superTask);
      }, function() {
        return nodefn.call(Shell.spawn, 'git', git.checkoutArgs(workDir, branch), superTask);
      }
    ]).then(function(result) {
      return callback(null, result);
    }, function(error) {
      if (error !== 'already cloned') {
        return callback(error);
      }
      superTask.notify.info.good('already cloned', workDir);
      return callback(null, {});
    });
  },
  commit: function(workDir, origin, branch, logMessage, superTask, callback) {
    return sequence([
      function() {
        return nodefn.call(git.missingRepo, workDir);
      }
    ]).then(function(result) {
      superTask.notify.info.normal('committed', workDir);
      return callback(null, result);
    }, function(error) {
      if (error !== 'missing repo') {
        return callback(error);
      }
      superTask.notify.info.bad('missing repo', workDir);
      return callback(null, {});
    });
  }
};
