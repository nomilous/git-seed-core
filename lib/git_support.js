// Generated by CoffeeScript 1.4.0
var Shell, defer, fs, git, mkdirp, nodefn, pipeline, sequence;

Shell = require('./shell');

fs = require('fs');

sequence = require('when/sequence');

pipeline = require('when/pipeline');

nodefn = require('when/node/function');

defer = require('when').defer;

mkdirp = require('fs-extra').mkdirp;

module.exports = git = {
  getConfigItem: function(superTask, repo, configItem, callback) {
    var gitDir;
    gitDir = "" + repo.workDir + "/.git";
    try {
      return Shell.spawn(null, 'git', ["--git-dir=" + gitDir, 'config', '--get', configItem], function(error, result) {
        if (error) {
          return callback(error);
        }
        repo[configItem] = result.stdout.trim();
        return callback(null, repo);
      });
    } catch (error) {
      return callback(error);
    }
  },
  getHEAD: function(superTask, repo, callback) {
    var gitDir;
    gitDir = "" + repo.workDir + "/.git";
    return fs.readFile("" + gitDir + "/HEAD", function(error, data) {
      if (error) {
        return callback(error);
      }
      try {
        repo.HEAD = data.toString().match(/ref: (.*)\n$/)[1];
      } catch (error) {
        return callback(error);
      }
      return callback(null, repo);
    });
  },
  getVersion: function(superTask, repo, ref, callback) {
    var gitDir;
    gitDir = "" + repo.workDir + "/.git";
    return fs.readFile("" + gitDir + "/" + ref, function(error, data) {
      if (error) {
        return callback(error);
      }
      repo.version = data.toString().trim();
      return callback(null, repo);
    });
  },
  getStatus: function(superTask, repo, callback) {
    var gitDir;
    repo.status || (repo.status = {});
    if (repo.status['missing repo']) {
      return callback(null, repo);
    }
    if (repo.status['wrong branch']) {
      return callback(null, repo);
    }
    gitDir = "" + repo.workDir + "/.git";
    return Shell.spawn(null, 'git', ["--git-dir=" + gitDir, "--work-tree=" + repo.workDir, 'status'], function(error, status) {
      if (error) {
        return callback(error);
      }
      if (status.stdout.match(/branch is ahead/)) {
        repo.status['unpushed changes'] = true;
        repo.status.latest = 'unpushed changes';
        repo.status.tenor = 'bad';
        repo.status.detail = status.stdout;
        return callback(null, repo);
      }
      if (status.stdout.match(/nothing to commit \(working directory clean\)/)) {
        repo.status['no changes'] = true;
        repo.status.latest = 'no changes';
        repo.status.tenor = 'normal';
        repo.status.detail = status.stdout;
        return callback(null, repo);
      }
      repo.status['has changes'] = true;
      repo.status.latest = 'has changes';
      repo.status.tenor = 'good';
      repo.status.detail = status.stdout;
      return callback(null, repo);
    });
  },
  checkoutArgs: function(workDir, branch) {
    return ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'checkout', branch.replace('refs/heads/', '')];
  },
  needClone: function(workDir, callback) {
    var gitDir;
    gitDir = git.gitDir(workDir);
    if (Shell.gotDirectory(gitDir)) {
      callback('already cloned');
      return;
    }
    return callback(null, {
      pre_checks: {
        missing_repo: true
      }
    });
  },
  missingRepo: function(superTask, repo, callback) {
    var gitDir, missing;
    gitDir = "" + repo.workDir + "/.git";
    missing = false;
    if (!Shell.gotDirectory(gitDir)) {
      missing = true;
    }
    repo.status || (repo.status = {});
    repo.status['missing repo'] = missing;
    if (missing) {
      repo.status.latest = 'missing repo';
      repo.status.tenor = 'bad';
    }
    return callback(null, repo);
  },
  wrongBranch: function(superTask, repo, callback) {
    repo.status || (repo.status = {});
    if (repo.status['missing repo']) {
      return callback(null, repo);
    }
    return git.getHEAD(superTask, {
      workDir: repo.workDir
    }, function(error, actualRepo) {
      var wrong;
      wrong = repo.HEAD !== actualRepo.HEAD;
      repo.status || (repo.status = {});
      repo.status['wrong branch'] = wrong;
      if (wrong) {
        repo.status.latest = 'wrong branch';
        repo.status.tenor = 'bad';
        repo.status.detail = "\nexpected " + repo.HEAD + "\nfound " + actualRepo.HEAD + "\n";
      }
      return callback(null, repo);
    });
  },
  getStagedChanges: function(workDir, callback) {
    return Shell.spawn(null, 'git', ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'diff', '--cached'], callback);
  },
  noStagedChanges: function(workDir, callback) {
    return git.getStagedChanges(workDir, function(error, result) {
      if (result.stdout === '') {
        return callback('nothing staged');
      }
      return callback(null);
    });
  },
  status: function(superTask, repo, args, callback) {
    var input;
    input = {
      workDir: repo.workDir,
      HEAD: repo.HEAD
    };
    return pipeline([
      function() {
        return nodefn.call(git.missingRepo, superTask, input);
      }, function(assemble) {
        return nodefn.call(git.wrongBranch, superTask, assemble);
      }, function(assemble) {
        return nodefn.call(git.getStatus, superTask, assemble);
      }
    ]).then(function(assembled) {
      var latest, tenor;
      latest = assembled.status.latest;
      tenor = assembled.status.tenor || 'normal';
      if (latest === 'no changes') {
        superTask.notify.info[tenor](latest, {
          description: assembled.workDir
        });
      } else {
        superTask.notify.info[tenor](latest, {
          description: assembled.workDir,
          detail: assembled.status.detail
        });
      }
      return callback(null, assembled);
    }, function(error) {
      return callback(error);
    });
  },
  clone: function(superTask, repo, args, callback) {
    var input;
    console.log('CLONE');
    input = {
      workDir: repo.workDir,
      'remote.origin.url': repo['remote.origin.url'],
      HEAD: repo.HEAD
    };
    return console.log(input);
  },
  commitArgs: function(workDir, logMessage) {
    return ["--git-dir=" + workDir + "/.git", "--work-tree=" + workDir, 'commit', '-m', logMessage];
  },
  commit: function(superTask, workDir, origin, branch, logMessage, callback) {
    return sequence([
      function() {
        return nodefn.call(git.missingRepo, workDir);
      }, function() {
        return nodefn.call(git.wrongBranch, workDir, branch);
      }, function() {
        return nodefn.call(git.noStagedChanges, workDir);
      }, function() {
        return nodefn.call(Shell.spawn, superTask, 'git', git.commitArgs(workDir, logMessage));
      }
    ]).then(function(resultArray) {
      var commited;
      commited = resultArray[3];
      superTask.notify.info.normal('committed', commited);
      return callback(null, resultArray);
    }, function(error) {
      if (error === 'missing repo') {
        superTask.notify.info.bad('missing repo', workDir);
        callback(null, {});
        return;
      }
      if (error === 'wrong branch') {
        superTask.notify.info.bad('wrong branch', "" + workDir + " - expects " + branch);
        callback(null, {});
        return;
      }
      if (error === 'nothing staged') {
        superTask.notify.info.normal('nothing staged', "" + workDir);
        callback(null, {});
        return;
      }
      return callback(error);
    });
  },
  pull: function(superTask, workDir, origin, branch, callback) {
    return sequence([
      function() {
        return nodefn.call(git.missingRepo, workDir);
      }, function() {
        return nodefn.call(git.wrongBranch, workDir, branch);
      }, function() {
        return nodefn.call(Shell.spawnAt, superTask, {
          directory: workDir
        }, 'git', ['pull', origin, branch]);
      }
    ]).then(function(resultArray) {
      var pulled;
      pulled = resultArray[2];
      console.log('pull result', pulled);
      return callback(null, resultArray);
    }, function(error) {
      if (error === 'missing repo') {
        superTask.notify.info.bad('missing repo', workDir);
        callback(null, {});
        return;
      }
      if (error === 'wrong branch') {
        superTask.notify.info.bad('wrong branch', "" + workDir + " - expects " + branch);
        callback(null, {});
        return;
      }
      return callback(error);
    });
  }
};
