// Generated by CoffeeScript 1.4.0
var Findit, GitRepo, GitSuport, Shell;

require('colors');

GitSuport = require('./git_support');

Shell = require('./shell');

Findit = require('findit');

GitRepo = (function() {

  GitRepo.init = function(repoDir, seq) {
    return new GitRepo({
      root: seq === 0,
      path: repoDir,
      origin: GitSuport.showOrigin(repoDir),
      branch: GitSuport.showBranch(repoDir),
      ref: GitSuport.showRef(repoDir)
    });
  };

  GitRepo.search = function(rootRepoDir, Plugin, callback) {
    var arrayOfGitWorkdirs, find, list;
    arrayOfGitWorkdirs = [];
    list = {};
    find = Findit.find(rootRepoDir);
    find.on('directory', function(dir, stat) {
      var match;
      if (match = dir.match(/(.*)\/.git\//)) {
        if (typeof list[match[1]] !== 'undefined') {
          return;
        }
        console.log('(found)'.green, "" + match[1] + "/.git");
        list[match[1]] = 1;
        return arrayOfGitWorkdirs.push(match[1]);
      }
    });
    return find.on('end', function() {
      var packages, path, seq, _i, _len;
      packages = [];
      seq = 0;
      for (_i = 0, _len = arrayOfGitWorkdirs.length; _i < _len; _i++) {
        path = arrayOfGitWorkdirs[_i];
        packages.push(Plugin.Package.init(path, seq++));
      }
      return callback(null, packages);
    });
  };

  function GitRepo(properties) {
    var property;
    for (property in properties) {
      this[property] = properties[property];
      if (property === 'ref' && this.root) {
        this[property] = 'ROOT_REPO_REF';
      }
    }
  }

  GitRepo.prototype.printMissing = function() {
    console.log(("(MISSING) repo: " + this.path).red);
    return false;
  };

  GitRepo.prototype.printStatus = function() {
    var show, status;
    if (!Shell.gotDirectory(this.path + '/.git')) {
      return this.printMissing();
    }
    status = GitSuport.showStatus(this.path, false);
    show = true;
    if (status.match(/nothing to commit \(working directory clean\)/)) {
      show = false;
    }
    if (status.match(/Your branch is ahead/)) {
      show = true;
    }
    if (show) {
      console.log('\n(change)'.green, this.path.bold);
      return console.log(status + '\n');
    } else {
      return console.log('(skip)'.green, "no change at " + this.path);
    }
  };

  GitRepo.prototype.clone = function(callback) {
    return GitSuport.clone(this.path, this.origin, this.branch, callback);
  };

  GitRepo.prototype.commit = function(message, callback) {
    return GitSuport.commit(this.path, this.branch, message, callback);
  };

  return GitRepo;

})();

module.exports = GitRepo;
